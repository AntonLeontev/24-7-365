<?xml version="1.0"?>
<ruleset name="TestSniffs">
    <description>Внутренние правила для PHP_CodeSniffer</description>

    <exclude-pattern>bootstrap.php</exclude-pattern>
    <exclude-pattern>Kernel.php</exclude-pattern>
	<exclude-pattern>*/tests/*</exclude-pattern>
 	<exclude-pattern>*/vendor/*</exclude-pattern>
 	<exclude-pattern>*/*.blade.php</exclude-pattern>


	<arg name="extensions" value="php" />
	<arg name="colors" />


    <config name="installed_paths" value="../../slevomat/coding-standard"/>


	<rule ref="PSR1">
    	<exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace"/>
	</rule>

	<rule ref="PSR2">
    	<exclude name="PSR2.ControlStructures.ControlStructureSpacing"/>
	</rule>

    <rule ref="PSR12">
        <exclude name="Generic.Files.LineLength"/>
    </rule>


    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses"/>

                <element value="enum cases"/>

                <!-- Public constants are first but you don't care about the order of protected or private constants -->
                <element value="public constants"/>
                <element value="constants"/>

                <!-- You don't care about the order among the properties. The same can be done with "properties" shortcut -->
                <element value="public properties"/>
                <element value="protected properties"/>
                <element value="private properties"/>
                <element value="public static properties"/>
                <element value="protected static properties"/>
                <element value="private static properties"/>

                <!-- Constructor is first, then all public methods, then protected/private methods and magic methods are last -->
                <element value="constructor"/>
                <element value="all public methods"/>
                <element value="methods"/>
                <element value="magic methods"/>
            </property>
        </properties>
    </rule>

    <!-- Правило забытых отладочных выводов  -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="eval=>NULL,dd=>NULL,die=>NULL,var_dump=>NULL"/>
        </properties>
    </rule>

    <!-- Правило короткой формы записи массивов (не array(), а []) -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found">
        <type>warning</type>
    </rule>

	<!-- Устанавливает количество пустых строк между элементами класса (свойствами и методами например) -->
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing">
		<properties>
			<property name="linesCountBetweenMembers" value="2" />
		</properties>
	</rule>	

	<!-- Количество пустых строк между методами -->
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
		<properties>
			<property name="minLinesCount" value="1" />
			<property name="maxLinesCount" value="1" />
		</properties>
	</rule>

	<!-- Проверяет количество пустых строк между объявлением констант -->
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
		<properties>
			<property name="minLinesCountBeforeWithComment" value="1" />
			<property name="maxLinesCountBeforeWithComment" value="1" />
			<property name="minLinesCountBeforeWithoutComment" value="0" />
			<property name="maxLinesCountBeforeWithoutComment" value="1" />
		</properties>
	</rule>

	<!-- Пробелы между типом и именем свойства -->
    <rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration"/>

	<!-- Проверяет количество пустых строк между объявлением свойств -->
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
		<properties>
			<property name="minLinesCountBeforeWithComment" value="1" />
			<property name="maxLinesCountBeforeWithComment" value="1" />
			<property name="minLinesCountBeforeWithoutComment" value="0" />
			<property name="maxLinesCountBeforeWithoutComment" value="1" />
		</properties>
	</rule>

	<!-- Проверяет количество пустых строк перед и после скобок класса -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
		<properties>
			<property name="linesCountAfterOpeningBrace" value="0" />
			<property name="linesCountBeforeClosingBrace" value="0" />
		</properties>
	</rule>

	<!-- Удаляет пустые комментарии -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>

	<!-- Исправляет конструкции if-else на более читаемые -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
		<properties>
			<property name="ignoreStandaloneIfInScope" value="false" />
			<property name="ignoreOneLineTrailingIf" value="true" />
			<property name="ignoreTrailingIfWithOneInstruction" value="true" />
		</properties>
	</rule>

	<!-- Исполльзует оператор ?: где возможно -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

	<!-- Исполльзует оператор ?= где возможно -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

	<!-- Исправляет условия, в которых обе ветки возвращают true или false -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>

	<!-- Форматирует объявление стрелочной функции [ fn() => ... ] -->
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
		<properties>
			<property name="spacesCountAfterKeyword" value="0" />
			<property name="spacesCountBeforeArrow" value="1" />
			<property name="spacesCountAfterArrow" value="1" />
			<property name="allowMultiLine" value="true" />
		</properties>
	</rule>

	<!-- Запрет на использование нестрогих операторов сравнения -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

	<!-- Установливает количество пробелов после оператора отрицания [ if (! empty(...) ] -->
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing">
		<properties>
			<property name="spacesCount" value="1" />
		</properties>
	</rule>

	<!-- Требует разделитель "_" для больших чисел [ 10_000_000 ] -->
    <!-- <rule ref="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator">
		<properties>
			<property name="enable" value="true" />
			<property name="minDigitsBeforeDecimalPoint" value="3" />
			<property name="minDigitsAfterDecimalPoint" value="3" />
			<property name="ignoreOctalNumbers" value="true" />
		</properties>
	</rule> -->

    <!-- Правило лишних точек с запятой -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>

    <!-- Правило ищет бесполезные скобки -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>

	<!-- Сортирует пространства имен по алфавиту -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

	<!-- Форматирует объявление пространства имен -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>

	<!-- Удаляет бесполезные Use -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>

	<!-- Добавляет declare(strict_types = 1) -->
    <!-- <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<properties>
			<property name="declareOnFirstLine" value="true" />
			<property name="linesCountBeforeDeclare" value="1" />
			<property name="linesCountAfterDeclare" value="1" />
			<property name="spacesCountAroundEqualsSign" value="1" />
		</properties>
	</rule> -->

	<!-- Checks whether the nullablity ? symbol is present before each nullable and optional parameter -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

	<!-- Проверяет пропущенные объявления типов -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

	<!-- Проверяет бесполезное объявление переменных -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
</ruleset>
